pip install rdflib
pip install GitPython

import csv
import git
from git import Repo
import os

from google.colab import drive
drive.mount('/content/drive')

# Github SSH setup

#Copy the SSH key from Google Drive and configure SSH access
# Create the .ssh directory if it doesnâ€™t exist
!mkdir -p ~/.ssh
# Copy the SSH key from Google Drive to the .ssh directory
!cp "/content/drive/MyDrive/Colab Notebooks/ssh/Github0511" ~/.ssh/id_rsa
# Set the correct permissions for the SSH key
!chmod 600 ~/.ssh/id_rsa

# Add GitHub to known hosts to skip confirmation prompts
!ssh-keyscan github.com >> ~/.ssh/known_hosts

repo_url = "git@github.com:marinagisen/{repo_name}.git"
repo_dir = "/content/{repo_name}"
if os.path.isdir(repo_dir):
  print('Repository already exists, Pulling latest changes...')
  repo = Repo(repo_dir)
  repo.git.pull()
else:
  print("Cloning the repository...")
  Repo.clone_from(repo_url,repo_dir)

# Ensure the remote URL is set to SSH (add this to confirm from the start)
repo.remotes.origin.set_url(repo_url)

print("Repository up to date")

#should show the repo_url if correctly called
print(repo.remotes.origin.url)

def commit_to_github(file_path: str, repo_directory: str, commit_message: str):
    # Initialize the GitPython Repo object
    repo = Repo(repo_directory)
    
    # Check if the repo has uncommitted changes or if the file is untracked
    if repo.is_dirty(untracked_files=True):  # Check if there are any changes in the repo
        # Stage the specified file
        repo.index.add([file_path])

        # Commit the file with the provided commit message
        repo.index.commit(commit_message)

        # Get the 'origin' remote (default for GitHub)
        origin = repo.remote(name='origin')
        
        # Push the changes to the remote repository
        origin.push()

        print(f"File {file_path} has been committed and pushed to the GitHub repository with message: '{commit_message}'")
    else:
        print("No changes to commit.")

commit_to_github(saved_file, repo_directory= repo_dir, commit_message = "Message")